# List the number of films per category.
select c.name as film_category,
	   count(film_id) as number_of_films
from sakila.category as c
left join sakila.film_category as fc
on c.category_id = fc.category_id
group by c.name;


# Retrieve the store ID, city, and country for each store.
select s.store_id,
       c.city,
       co.country       
from sakila.store as s
left join sakila.address as a on s.address_id = a.address_id
left join sakila.city as c on a.city_id = c.city_id
left join sakila.country as co on c.country_id = co.country_id;

# Calculate the total revenue generated by each store in dollars.
select s.store_id, 
	   sum(p.amount) as total_revenue
from sakila.store as s
inner join sakila.payment as p  FORCE INDEX (idx_fk_staff_id)
on s.manager_staff_id = p.staff_id
group by s.store_id;


# Determine the average running time of films for each category.
with film_category_time as(
							select f.film_id,
								   f.title,
								   c.name as category,
								   f.length
							from sakila.film as f
							inner join sakila.film_category as fc
							on f.film_id = fc.film_id
							inner join sakila.category as c
							on fc.category_id = c.category_id
)

select category, avg(length) as avg_runtime
from film_category_time
group by category;



# Identify the film categories with the longest average running time.
with film_category_time as(
							select f.film_id,
								   f.title,
								   c.name as category,
								   f.length
							from sakila.film as f
							inner join sakila.film_category as fc
							on f.film_id = fc.film_id
							inner join sakila.category as c
							on fc.category_id = c.category_id
)

select category, avg(length) as avg_runtime
from film_category_time
group by category
order by avg(length) desc
limit 1;

# Display the top 10 most frequently rented movies in descending order.
select f.title
from sakila.rental as r
left join sakila.inventory as i
on r.inventory_id = i.inventory_id
inner join sakila.film as f
on i.film_id = f.film_id
group by f.title
order by count(r.rental_id) desc
limit 10;


# Determine if "Academy Dinosaur" can be rented from Store 1.
# can be rented from store 1 or store 2
select distinct store_id
from sakila.inventory
where film_id = (select film_id from sakila.film where title = 'Academy Dinosaur' );


# Provide a list of all distinct film titles, along with their availability status in the inventory. 
# Include a column indicating whether each title is 'Available' or 'NOT available.' 
# Note that there are 42 titles that are not in the inventory, and this information can be obtained using a `CASE` statement combined with `IFNULL`."

select title,
	   CASE WHEN exists( select 1 from sakila.inventory i where f.film_id = i.film_id)  then 'Available'
       else 'Not Available' end as availability
from sakila.film f








